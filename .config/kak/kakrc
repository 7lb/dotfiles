# options ---------------------------------------------------------------------
set-option global tabstop 4
set-option global indentwidth 0
set-option global scrolloff 10,10

add-highlighter global/ number-lines -hlcursor
add-highlighter global/ regex \h+$ 0:Error
add-highlighter global/ wrap -word -indent

# commands --------------------------------------------------------------------
define-command \
	-docstring 'Horizontal split' \
	split 'tmux-terminal-vertical kak -c %val{session}<ret>'

define-command \
	-docstring 'Vertical split' \
	vsplit 'tmux-terminal-horizontal kak -c %val{session}<ret>'

alias global wqa 'write-all-quit'
alias global sp 'split'
alias global vs 'vsplit'

define-command -hidden refine -params 2.. %{ nop %sh{
	# $1 is a path to a file containing the items to filter
	#    the file is space-separated single-quoted paths, but we need
	#    newline-separated unquoted paths to pipe to fzf
	# $2 is either file, dir, text, or buffer to determine how to preview and confirm
	# $3.. are command-specific parameters that are forwarded,
	#    e.g. change-root-internal forwards the original command and
	#    original root dir so it can re-invoke the command it was
	#    invoked from, with either the original rootDir (if esc is pressed)
	#    or with the new choice of rootDir (if one was selected)
	#
	# This function can "call" itself recursively

	itemsFile="$1"
	items=$(cat "$itemsFile" | sed "s/' '/'\n'/g" | tr -d "'")
	type="$2"

	shift 2
	cmdArgs="$*"

	case "$type" in
	file | dir | buffer)
		delimiter=""
		;;
	text)
		delimiter=":"
		;;
	esac

	case "$type" in
	file | buffer)
		preview="bat -n --color=always {}"
		previewWindow="right,border-left,60%"
		;;
	dir)
		preview="ls -lh --color=always {}"
		previewWindow="right,border-left,60%"
		;;
	text)
		preview="bat -n --style=header,numbers --color=always {1} --highlight-line {2}"
		previewWindow="bottom,border-top,70%,+{2}+3/3,~1"
		;;
	esac

	case "$type" in
	file)
		onAccept="printf %s \"eval -client '$kak_client' edit %{{}}\" | kak -p '$kak_session'"
		;;
	dir)
		cmd="$1"
		oldRoot="$2"

		shift 2
		innerArgs="$*"
		onAccept="printf %s \"eval -client '$kak_client' '$cmd' %{{}} $innerArgs\" | kak -p '$kak_session'"
		;;
	buffer)
		onAccept="printf %s \"eval -client '$kak_client' buffer %{{}}\" | kak -p '$kak_session'"
		;;
	text)
		onAccept="printf %s \"eval -client '$kak_client' edit %{{1}} %{{2}} %{{3}}\" | kak -p '$kak_session'"
		;;
	esac

	printf %s "$items" | fzf-tmux \
		-p 90% \
		--ansi \
		--multi \
		--highlight-line \
		--delimiter="$delimiter" \
		--preview "$preview" \
		--preview-window "$previewWindow" \
		--bind "enter:execute($onAccept)+accept" \
		--bind "alt-s:select-all+become( \
			printf %s \"eval -client '$kak_client' \
			refine %{{+f}} $type $cmdArgs\" \
			| kak -p '$kak_session' \
		)"

	# When using `execute` with a {+f} placeholder, the temp file gets deleted
	# at the end of the `execute` process. That does not work for us because we
	# just execute a `printf`, so by the time control reaches this kakoune command,
	# the file itself would have been deleted.
	# That doesn't happen with `become`, which allows infinite refinement,
	# but that also means we need to clean the temp file ourselves otherwise we
	# litter the tempfs with tons of possibly very big files (refining the
	# result of choose-root-dir creates an 8.1MiB temp file on my system)
	rm -f "$itemsFile"
}}

define-command -hidden change-root-internal -params 2.. %{ nop %sh{
	# $1 is the kakoune command this command was invoked from
	# $2 is the root dir of the caller at the time of the call
	# $3.. are any command-specific parameters pertaining to $1
	#
	# This function lets you choose a directory under /home from which to
	# run the original command, if one needs to look outside of $cwd

	cmd="$1"
	oldRoot="$2"

	shift 2
	cmdArgs="$*"

	newRoot=$(fd . /home \
		--hidden \
		--type d \
	| fzf-tmux \
		-p 90% \
		--ansi \
		--multi \
		--highlight-line \
		--preview "ls -lh --color=always {}" \
		--preview-window "right,border-left,60%" \
		--bind "enter:execute( \
			printf %s \"eval -client '$kak_client' '$cmd' %{{}} $cmdArgs\" | kak -p '$kak_session' \
		)+accept" \
		--bind "alt-s:select-all+become( \
			printf %s \"eval -client '$kak_client' \
			refine %{{+f}} dir '$cmd' '$oldRoot' $cmdArgs\" \
			| kak -p '$kak_session' \
		)")

	if [ "$?" -ne 0 ]; then # esc pressed
		printf %s "eval -client '$kak_client' '$cmd' '$oldRoot' $cmdArgs" | kak -p "$kak_session"
	fi
}}

define-command -docstring 'Find file' find-file %{ evaluate-commands %{find-file-internal .} }
define-command -hidden find-file-internal -params 1.. %{ nop %sh{
	rootDir="$1"

	fd . "$rootDir" \
		--hidden \
		--type f \
		--exclude "/.git" \
		--exclude "/.zig-cache" \
	| fzf-tmux \
		-p 90% \
		--ansi \
		--multi \
		--highlight-line \
		--preview "bat -n --color=always {}" \
		--preview-window "right,border-left,60%" \
		--bind "enter:execute( \
			printf %s \"eval -client '$kak_client' edit %{{}}\" | kak -p '$kak_session' \
		)+accept" \
		--bind "alt-d:become( \
			printf %s \"eval -client '$kak_client' \
			change-root-internal find-file-internal $rootDir\" \
			| kak -p '$kak_session' \
		)" \
		--bind "alt-s:select-all+become( \
			printf %s \"eval -client '$kak_client' \
			refine %{{+f}} file\" | kak -p '$kak_session' \
		)"
}}

define-command -docstring 'Find text' find-text %{ evaluate-commands %{find-text-internal .} }
define-command -hidden find-text-internal -params 1.. %{ nop %sh{
	rootDir="$1"

	rgCmd="rg \
		--hidden \
		--smart-case \
		--no-heading \
		--line-number \
		--column \
		--color=always \
		--glob '!/.git' \
		--glob '!/.zig-cache'"

	fzf-tmux \
		-p 90% \
		--ansi \
		--multi \
		--highlight-line \
		--disabled \
		--delimiter : \
		--preview "bat -n --style=header,numbers --color=always {1} --highlight-line {2}" \
		--preview-window "bottom,border-top,70%,+{2}+3/3,~1" \
		--prompt "rg> " \
		--bind "start:reload:$rgCmd {q} $rootDir" \
		--bind "change:reload:sleep 0.1; $rgCmd {q} $rootDir || true" \
		--bind "enter:execute( \
			printf %s \"eval -client '$kak_client' edit %{{1}} %{{2}} %{{3}}\" | kak -p '$kak_session' \
		)+accept" \
		--bind "alt-d:become( \
			printf %s \"eval -client '$kak_client' \
			change-root-internal find-text-internal $rootDir\" \
			| kak -p '$kak_session' \
		)" \
		--bind "alt-s:select-all+become( \
			printf %s \"eval -client '$kak_client' \
			refine %{{+f}} text\" | kak -p '$kak_session' \
		)"
}}

define-command -docstring 'Find buffer' find-buffer %{ evaluate-commands %{ find-buffer-internal } }
define-command -hidden find-buffer-internal -params 0.. %{ nop %sh{
	buffers=$(printf %s "$kak_buflist" | tr " " "\n")
	printf %s "$buffers" | fzf-tmux \
		-p 90% \
		--ansi \
		--multi \
		--highlight-line \
		--preview "bat -n --color=always {}" \
		--preview-window "right,border-left,60%" \
		--bind "enter:execute( \
			printf %s \"eval -client '$kak_client' buffer %{{}}\" | kak -p '$kak_session' \
		)+accept" \
		--bind "alt-s:select-all+become( \
			printf %s \"eval -client '$kak_client' \
			refine %{{+f}} buffer\" | kak -p '$kak_session' \
		)"
}}

# hooks -----------------------------------------------------------------------
# Use <tab> <s-tab> to navigate completion menu -------------------------------
hook global InsertCompletionShow .* %{
	try %{
		map window insert <tab> <c-n>
		map window insert <s-tab> <c-p>
		hook -once -always window InsertCompletionHide .* %{
			unmap window insert <tab>
			unmap window insert <s-tab>
		}
	}
}

# map modes and mappings ------------------------------------------------------
declare-user-mode leader

map -docstring 'Leader mode' global user , ':enter-user-mode leader<ret>'
map -docstring 'Easily dismiss selection' global normal <esc> ',;'
map -docstring 'Search case insensitive' global normal / '/(?i)'
map -docstring 'Search back case insensitive' global normal <a-/> '<a-/>(?i)'
map -docstring 'Extend search case insensitive' global normal ? '?(?i)'
map -docstring 'Extend search back case insensitive' global normal <a-?> '<a-?>(?i)'
map -docstring 'Find file' global normal <c-p> ':find-file<ret>'
map -docstring 'Find text' global normal <c-f> ':find-text<ret>'

# plugins and config ----------------------------------------------------------
# lsp -------------------------------------------------------------------------
eval %sh{kak-lsp}

lsp-enable
lsp-inlay-diagnostics-enable global

unmap global goto d
unmap global goto y
unmap global goto r

map -docstring 'LSP mode' global user l ':enter-user-mode lsp<ret>'
map -docstring 'Select next snippet placeholder' \
	global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{execute-keys -with-hooks <lt>tab>}<ret>'
map -docstring 'Any symbol object' global object a '<a-;>lsp-object<ret>'
map -docstring 'Any symbol object' global object <a-a> '<a-;>lsp-object<ret>'
map -docstring 'Function object' global object f '<a-;>lsp-object Function Method<ret>'
map -docstring 'Struct object' global object t '<a-;>lsp-object Class Interface Struct<ret>'

# lsp extension to leader mode
map -docstring 'Signature help' global leader ? ':lsp-signature-help<ret'
map -docstring 'Hover' global leader h ':lsp-hover<ret>'
map -docstring 'Rename' global leader r ':lsp-rename-prompt<ret>'
map -docstring 'Code action' global leader a ':lsp-code-actions<ret>'

declare-user-mode ugoto
map -docstring 'User goto mode' global user g ':enter-user-mode ugoto<ret>'
map -docstring 'Goto definition' global ugoto d ':lsp-definition<ret>'
map -docstring 'Goto type definition' global ugoto t ':lsp-type-definition<ret>'
map -docstring 'Goto references' global ugoto r ':lsp-references<ret>'
map -docstring 'Goto other file' global ugoto o ':clangd-switch-source-header<ret>'
map -docstring 'Goto next error diagnostic' global ugoto e ':lsp-diagnostic-object<ret>'
map -docstring 'Goto next diagnostic' global ugoto w ':lsp-diagnostic-object --include-warnings<ret>'

hook global BufWritePre .* lsp-formatting-sync

# treesitter
eval %sh{ kak-treesitter -dks --init "$kak_session" }
